pub struct SliceGroupBy<'a, T: 'a, K: Eq, F: Fn(&T) -> K> {
    key_fn: F,
    rest: &'a [T],
}
impl<'a, T, K: Eq, F: Fn(&T) -> K> Iterator for SliceGroupBy<'a, T, K, F> {
    type Item = (K, &'a [T]);
    fn next(&mut self) -> Option<(K, &'a [T])> {
        if self.rest.is_empty() {
            return None;
        }
        let key = (self.key_fn)(&self.rest[0]);
        let mut end = 1;
        while end < self.rest.len() && (self.key_fn)(&self.rest[end]) == key {
            end += 1;
        }
        let (left, right) = self.rest.split_at(end);
        self.rest = right;
        Some((key, left))
    }
}
pub trait SliceExtGroupBy<T, K: Eq, F: Fn(&T) -> K> {
    fn group_by(&self, key_fn: F) -> SliceGroupBy<T, K, F>;
}
impl<T, K: Eq, F: Fn(&T) -> K> SliceExtGroupBy<T, K, F> for [T] {
    fn group_by(&self, key_fn: F) -> SliceGroupBy<T, K, F> {
        SliceGroupBy {
            key_fn: key_fn,
            rest: self,
        }
    }
}
pub struct Permutations<'a, T: 'a> {
    items: &'a [T],
    indices: Option<Vec<usize>>,
    is_first: bool,
}
impl<'a, T: 'a> Iterator for Permutations<'a, T> {
    type Item = Vec<&'a T>;
    fn next(&mut self) -> Option<Vec<&'a T>> {
        if !self.is_first {
            let indices_opt = self.indices.take();
            if let Some(indices) = indices_opt {
                self.indices = next_permutation(indices);
            }
        } else {
            self.is_first = false;
        }
        self.indices
            .as_ref()
            .map(|indices| indices.into_iter().map(|&i| &self.items[i]).collect())
    }
}
fn next_permutation(mut indices: Vec<usize>) -> Option<Vec<usize>> {
    (0..indices.len().saturating_sub(1))
        .rev()
        .find(|&left| indices[left] < indices[left + 1])
        .map(|left| {
            let right = (0..indices.len())
                .rev()
                .find(|&right| indices[left] < indices[right])
                .unwrap();
            indices.swap(left, right);
            indices[left + 1..].reverse();
            indices
        })
}
pub trait SliceExt<T> {
    fn permutations(&self) -> Permutations<T>;
}
impl<T> SliceExt<T> for [T] {
    fn permutations(&self) -> Permutations<T> {
        let indices = if self.is_empty() {
            None
        } else {
            Some((0..self.len()).collect())
        };
        Permutations {
            items: self,
            indices: indices,
            is_first: true,
        }
    }
}